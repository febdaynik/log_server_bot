from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from bot.keyboards.server import server_info_markup
from bot.utils.ssh import SshServer

router = Router()


async def template_get_server(call: CallbackQuery, ssh_server: SshServer) -> Message:
    is_connected = ssh_server.is_connected
    is_owner = ssh_server.server.owner_id == call.from_user.id

    if is_connected:
        blockquote = (
            "<blockquote>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\", —á—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–∏–ª–∞—Å—å\n\n"
            "–≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–∏—Å–∞–ª</blockquote>"
        )
    else:
        blockquote = (
            "<blockquote>–ß—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è\n\n"
            "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è\"</blockquote>"
        )

    return await call.message.edit_text(
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {ssh_server.server.name}\n"
        f"<b>IP:</b> <code>{ssh_server.server.ip_address}</code>\n"
        "<b>üñ• OS:</b> <i>–ü–æ –∑–∞–ø—Ä–æ—Å—É</i>\n"
        "<b>‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> <i>–ü–æ –∑–∞–ø—Ä–æ—Å—É</i>\n"
        "<b>üíΩ –î–∏—Å–∫:</b> <i>–ü–æ –∑–∞–ø—Ä–æ—Å—É</i>\n"
        "<b>üíæ –ü–∞–º—è—Ç—å:</b> <i>–ü–æ –∑–∞–ø—Ä–æ—Å—É</i>\n\n"
        f"{blockquote}",
        reply_markup=server_info_markup(server_id=ssh_server.server.id, is_connected=is_connected, is_owner=is_owner),
    )


@router.callback_query(F.data.startswith("server:get:"))
async def get_server_callback(call: CallbackQuery, state: FSMContext, ssh_server: SshServer):
    await state.clear()

    return await template_get_server(call=call, ssh_server=ssh_server)
